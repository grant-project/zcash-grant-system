import click
import datetime
from random import randint
from math import floor
from flask.cli import with_appcontext

from .models import Proposal, db
from grant.milestone.models import Milestone
from grant.comment.models import Comment
from grant.utils.enums import ProposalStatus, Category, ProposalStage
from grant.user.models import User


@click.command()
@click.argument('stage')
@click.argument('user_id')
@click.argument('proposal_id')
@click.argument('title')
@click.argument('content')
@with_appcontext
def create_proposal(stage, user_id, proposal_id, title, content):
    proposal = Proposal.create(stage=stage,
                               user_id=user_id,
                               proposal_id=proposal_id,
                               title=title,
                               content=content)
    db.session.add(proposal)
    db.session.commit()


@click.command()
@click.argument('count', type=int)
@with_appcontext
def create_proposals(count):
    user = User.query.filter_by().first()
    for i in range(count):
        if i < 5:
            stage = ProposalStage.WIP
        else:
            stage = ProposalStage.COMPLETED
        p = Proposal.create(
            stage=stage,
            status=ProposalStatus.LIVE,
            title=f'Fake Proposal #{i}',
            content=f'My fake proposal content, numero {i}',
            brief=f'This is proposal {i} generated by "flask create-proposals"',
            category=Category.ACCESSIBILITY,
            target="123.456",
            payout_address="fake123",
            deadline_duration=100
        )
        p.date_published = datetime.datetime.now()
        p.team.append(user)
        p.date_approved = datetime.datetime.now()
        p.accepted_with_funding = True
        p.version = '2'
        p.fully_fund_contibution_bounty()
        db.session.add(p)
        db.session.flush()
        num_ms = randint(1, 9)
        for j in range(num_ms):
            m = Milestone(
                title=f'Fake MS {j}',
                content=f'Fake milestone #{j} on fake proposal #{i}!',
                days_estimated='10',
                payout_percent=str(floor(1 / num_ms * 100)),
                immediate_payout=j == 0,
                proposal_id=p.id,
                index=j
            )
            db.session.add(m)
        for j in range(100):
            c = Comment(
                proposal_id=p.id,
                user_id=user.id,
                parent_comment_id=None,
                content=f'Fake comment #{j} on fake proposal #{i}!'
            )
            db.session.add(c)

        Milestone.set_v2_date_estimates(p)
        db.session.add(p)

    db.session.commit()
    print(f'Added {count} LIVE fake proposals')


@click.command()
@click.argument('dry', required=False)
@with_appcontext
def retire_v1_proposals(dry):
    now = datetime.datetime.now()
    proposals = Proposal.query.filter_by(stage="FUNDING_REQUIRED").all()
    modified_count = 0

    if not proposals:
        print("No proposals found. Exiting...")
        return

    print(f"Found {len(proposals)} proposals to modify")
    if dry:
        print(f"This is a dry run. Changes will not be committed to database")

    confirm = input("Continue? (y/n) ")

    if confirm != "y":
        print("Exiting...")
        return

    for p in proposals:
        if not dry:
            new_deadline = (now - p.date_published).total_seconds()
            p.stage = ProposalStage.FAILED
            p.deadline_duration = int(new_deadline)
            db.session.add(p)
            modified_count += 1

        print(f"Modified proposal {p.id} - {p.title}")

    if not dry:
        print(f"Committing changes to database")
        db.session.commit()

    print(f"Modified {modified_count} proposals")

